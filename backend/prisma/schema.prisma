generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  status        String
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @db.Timestamptz(6)
  components    Component[]
  wiringSchemas WiringSchema[]
  messages      Message[]
}

model Component {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId        String        @db.Uuid
  currentVersionId String?       @db.Uuid
  versions         CompVersion[]
  currentVersion   CompVersion?  @relation("currentCompVersion", fields: [currentVersionId], references: [id])
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model CompVersion {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  componentId   String      @db.Uuid
  versionNumber Int
  createdBy     String
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  specs         Json
  changeLogs    ChangeLog[]
  component     Component   @relation(fields: [componentId], references: [id], onDelete: Cascade)
  currentFor    Component[] @relation("currentCompVersion")

  @@unique([componentId, versionNumber])
}

model WiringSchema {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId        String        @db.Uuid
  currentVersionId String?       @db.Uuid
  versions         WireVersion[]
  currentVersion   WireVersion?  @relation("currentWireVersion", fields: [currentVersionId], references: [id])
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model WireVersion {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wiringSchemaId String         @db.Uuid
  versionNumber  Int
  createdBy      String
  createdAt      DateTime       @default(now()) @db.Timestamptz(6)
  wiringData     Json
  changeLogs     ChangeLog[]
  wiringSchema   WiringSchema   @relation(fields: [wiringSchemaId], references: [id], onDelete: Cascade)
  currentFor     WiringSchema[] @relation("currentWireVersion")

  @@unique([wiringSchemaId, versionNumber])
}

model ChangeLog {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entity        String
  changeType    String
  author        String
  diffPayload   Json?
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  compVersionId String?      @db.Uuid
  wireVersionId String?      @db.Uuid
  compVersion   CompVersion? @relation(fields: [compVersionId], references: [id], onDelete: Restrict)
  wireVersion   WireVersion? @relation(fields: [wireVersionId], references: [id], onDelete: Restrict)
}

model Message {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId  String   @db.Uuid
  context    String   // ex. "general", "materials", "wiring", "3d"
  content    String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  @@index([projectId, context])
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
