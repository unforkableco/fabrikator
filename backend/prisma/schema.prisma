generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  status        String
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @db.Timestamptz(6)
  components    Component[]
  wiringSchemas WiringSchema[]
  messages      Message[]
  scenes3d      Scene3D[]
  designPreviews DesignPreview[]
  // Latest picked design thumbnail for summaries
  designThumbnailUrl String?
  cadGenerations ProjectCadGeneration[]
}

model Component {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId        String        @db.Uuid
  currentVersionId String?       @db.Uuid
  versions         CompVersion[]
  currentVersion   CompVersion?  @relation("currentCompVersion", fields: [currentVersionId], references: [id])
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  componentSpecs   ComponentSpecs[]
}

model CompVersion {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  componentId   String      @db.Uuid
  versionNumber Int
  createdBy     String
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  specs         Json
  changeLogs    ChangeLog[]
  component     Component   @relation(fields: [componentId], references: [id], onDelete: Cascade)
  currentFor    Component[] @relation("currentCompVersion")

  @@unique([componentId, versionNumber])
}

model WiringSchema {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId        String        @db.Uuid
  currentVersionId String?       @db.Uuid
  versions         WireVersion[]
  currentVersion   WireVersion?  @relation("currentWireVersion", fields: [currentVersionId], references: [id])
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model WireVersion {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wiringSchemaId String         @db.Uuid
  versionNumber  Int
  createdBy      String
  createdAt      DateTime       @default(now()) @db.Timestamptz(6)
  wiringData     Json
  changeLogs     ChangeLog[]
  wiringSchema   WiringSchema   @relation(fields: [wiringSchemaId], references: [id], onDelete: Cascade)
  currentFor     WiringSchema[] @relation("currentWireVersion")

  @@unique([wiringSchemaId, versionNumber])
}

model ChangeLog {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entity         String
  changeType     String
  author         String
  diffPayload    Json?
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  compVersionId  String?       @db.Uuid
  wireVersionId  String?       @db.Uuid
  sceneVersionId String?       @db.Uuid
  compVersion    CompVersion?  @relation(fields: [compVersionId], references: [id], onDelete: Restrict)
  wireVersion    WireVersion?  @relation(fields: [wireVersionId], references: [id], onDelete: Restrict)
  sceneVersion   SceneVersion? @relation(fields: [sceneVersionId], references: [id], onDelete: Restrict)
}

model Message {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String   @db.Uuid
  context     String   // ex. "general", "materials", "wiring", "3d"
  content     String
  sender      String   // 'user' or 'ai'
  mode        String   // 'ask' or 'agent'
  suggestions Json?    // Suggestions attach√©es au message (pour les messages AI)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)

  @@index([projectId, context])
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Scene3D {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId        String         @db.Uuid
  name             String         @default("New Scene")
  currentVersionId String?        @db.Uuid
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @db.Timestamptz(6)
  versions         SceneVersion[]
  currentVersion   SceneVersion?  @relation("currentSceneVersion", fields: [currentVersionId], references: [id])
  project          Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model SceneVersion {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scene3dId    String       @db.Uuid
  versionNumber Int
  sceneGraph   Json         // Hierarchical structure with transforms
  createdBy    String
  createdAt    DateTime     @default(now()) @db.Timestamptz(6)
  changeLogs   ChangeLog[]
  scene3d      Scene3D      @relation(fields: [scene3dId], references: [id], onDelete: Cascade)
  currentFor   Scene3D[]    @relation("currentSceneVersion")
  
  @@unique([scene3dId, versionNumber])
}

model Component3D {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  type        Component3DType
  category    String           // chassis, decoration, pcb, sensor, etc.
  filePath    String?          // Path to STL file (nullable for generated components)
  fileSize    Int?             // File size in bytes
  metadata    Json             // Properties, dimensions, constraints, prompts
  isGenerated Boolean          @default(false)
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime         @default(now()) @db.Timestamptz(6)
}

enum Component3DType {
  DESIGN      // Decorative pieces generated by AI
  FUNCTIONAL  // Utility pieces (chassis, screws, etc.)
  ELECTRONIC  // Existing electronic components
  MECHANICAL  // Existing mechanical components
}

model DesignPreview {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String   @db.Uuid
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Generated designs (3 options)
  designs     DesignOption[]
  
  // Selected design
  selectedDesignId String? @db.Uuid
  selectedDesign   DesignOption? @relation("selectedDesign", fields: [selectedDesignId], references: [id])
  // Async generation progress tracking for initial/iterative image generation
  status       String?    // pending|success|failed
  stage        String?    // starting|concept|description|image_variants|finalizing
  progress     Int?
  logText      String?    @db.Text
  startedAt    DateTime?  @db.Timestamptz(6)
  finishedAt   DateTime?  @db.Timestamptz(6)
  
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
}

model ProjectCadGeneration {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId    String        @db.Uuid
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  designOptionId String?     @db.Uuid
  outputDir    String
  status       String        // pending|success|failed
  logText      String?       @db.Text
  // Progress tracking
  stage        String?       // starting|analyzing|parts_list|codegen|stl_export|finalizing
  progress     Int?          // 0..100
  totalParts   Int?          // total number of parts planned
  completedParts Int?        // number of parts successfully exported
  failedParts  Int?          // number of parts failed
  startedAt    DateTime      @default(now()) @db.Timestamptz(6)
  finishedAt   DateTime?     @db.Timestamptz(6)
  // Intermediates for reproducibility and iteration
  analysisJson Json?
  partsJson    Json?
  designImagePath String?
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  parts        ProjectCadPart[]
  // Enhanced pipeline additions
  hardwareSpecs Json?        // Hardware analysis results
  assemblyPlan  Json?        // Assembly planning results
  manufacturingConstraints Json? // Manufacturing optimization results
  assemblyValidations AssemblyValidation[]
  refinementIterations RefinementIteration[]
}

model ProjectCadPart {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cadGenerationId String   @db.Uuid
  cadGeneration   ProjectCadGeneration @relation(fields: [cadGenerationId], references: [id], onDelete: Cascade)
  key             String
  name            String
  description     String?  @db.Text
  geometryHint    String?  @db.Text
  approxDims      Json?
  features        Json?
  appearance      Json?
  // Snapshot of the single part JSON used to generate this script
  partJson        Json?
  // Optional prompt metadata (system/user) for traceability
  promptMeta      Json?
  scriptCode      String?  @db.Text
  scriptPath      String?
  stlPath         String?
  stlData         Bytes?
  status          String   // processing|success|failed
  errorLog        String?  @db.Text
  startedAt       DateTime  @default(now()) @db.Timestamptz(6)
  finishedAt      DateTime? @db.Timestamptz(6)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  // Enhanced pipeline additions
  interfaces      PartInterface[] @relation("PartA")
  connectedTo     PartInterface[] @relation("PartB")
  validationResults PartValidationResult[]
}

model DesignOption {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  designPreviewId String        @db.Uuid
  designPreview   DesignPreview @relation(fields: [designPreviewId], references: [id], onDelete: Cascade)
  
  // Image data
  imageUrl        String        // URL or file path to generated image
  imagePrompt     String        // The prompt used to generate this image
  description     String        // AI-generated description of the design
  concept         String        // Design concept name
  
  // Design metadata
  keyFeatures     String[]      // Array of key features
  complexity      String        // low, medium, high
  printability    String        @default("moderate") // kept for compatibility; default ensures optional on create
  
  // Technical specifications for 3D printing (kept for compatibility, but unused)
  technicalSpecs  Json?
  
  // Selection tracking
  selectedFor     DesignPreview[] @relation("selectedDesign")

  // Iteration chain (self-relation)
  parentDesignOptionId String? @db.Uuid
  parentDesign         DesignOption? @relation("DesignIteration", fields: [parentDesignOptionId], references: [id])
  childDesigns         DesignOption[] @relation("DesignIteration")
  
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
}

// Enhanced Pipeline Models

// Component technical specifications extracted by HardwareAnalysisService
model ComponentSpecs {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  componentId  String     @db.Uuid
  component    Component  @relation(fields: [componentId], references: [id], onDelete: Cascade)
  
  // Physical dimensions and constraints
  dimensions   Json       // width, height, depth, mounting holes
  ports        Json       // USB-C, power, button locations with coordinates
  constraints  Json       // clearances, orientations, thermal requirements
  mountingInfo Json       // hole patterns, screw types, depths
  
  // Analysis metadata
  extractedBy  String     // ai_agent or manual
  confidence   Float?     // confidence score for AI extraction
  verified     Boolean    @default(false)
  
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(6)
  
  @@unique([componentId])
}

// Part-to-part interfaces and relationships defined by AssemblyPlanningService
model PartInterface {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  partAId       String          @db.Uuid
  partBId       String          @db.Uuid
  partA         ProjectCadPart  @relation("PartA", fields: [partAId], references: [id], onDelete: Cascade)
  partB         ProjectCadPart  @relation("PartB", fields: [partBId], references: [id], onDelete: Cascade)
  
  // Interface specifications
  interfaceType String          // screw, clip, press-fit, snap, slide
  dimensions    Json            // interface geometry specifications
  tolerances    Json            // fit tolerances and clearances
  features      Json            // specific features needed (holes, tabs, grooves)
  
  // Assembly information
  assemblyOrder Int?            // order in assembly sequence
  toolsRequired String[]        // tools needed for assembly
  notes         String?         @db.Text
  
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  
  @@unique([partAId, partBId])
}

// Assembly validation results from AssemblyValidationService
model AssemblyValidation {
  id              String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cadGenerationId String               @db.Uuid
  cadGeneration   ProjectCadGeneration @relation(fields: [cadGenerationId], references: [id], onDelete: Cascade)
  
  // Validation results
  overallStatus   String               // passed, failed, warning
  fitmentCheck    Json                 // part-to-part fitment results
  clearanceCheck  Json                 // clearance validation results
  interferenceCheck Json              // interference detection results
  accessibilityCheck Json             // assembly accessibility analysis
  
  // Specific issues found
  issues          Json                 // detailed list of problems
  recommendations Json                 // suggested fixes
  
  // Validation metadata
  validatedBy     String               // validation agent version
  validationTime  DateTime             @default(now()) @db.Timestamptz(6)
  
  partResults     PartValidationResult[]
}

// Individual part validation results
model PartValidationResult {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assemblyValidationId String             @db.Uuid
  partId               String             @db.Uuid
  assemblyValidation   AssemblyValidation @relation(fields: [assemblyValidationId], references: [id], onDelete: Cascade)
  part                 ProjectCadPart     @relation(fields: [partId], references: [id], onDelete: Cascade)
  
  // Part-specific validation results
  geometryValid    Boolean              // basic geometry validation
  dimensionsValid  Boolean              // dimension accuracy check
  featuresValid    Boolean              // required features present
  printabilityValid Boolean             // 3D printing feasibility
  
  // Specific issues
  geometryIssues   String[]             // geometry problems found
  dimensionIssues  String[]             // dimension problems
  featureIssues    String[]             // missing or incorrect features
  printIssues      String[]             // 3D printing problems
  
  // Recommendations
  recommendations  Json                 // specific improvement suggestions
  
  validatedAt      DateTime             @default(now()) @db.Timestamptz(6)
}

// Refinement iterations tracking
model RefinementIteration {
  id               String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cadGenerationId  String               @db.Uuid
  cadGeneration    ProjectCadGeneration @relation(fields: [cadGenerationId], references: [id], onDelete: Cascade)
  
  // Iteration information
  iterationNumber  Int                  // 1, 2, 3, etc.
  triggerReason    String               // validation_failure, user_feedback, quality_improvement
  
  // Input for refinement
  previousResults  Json                 // previous validation results
  targetIssues     String[]             // specific issues to address
  refinementGoals  Json                 // goals for this iteration
  
  // Refinement results
  status           String               // in_progress, completed, failed
  partModifications Json                // what parts were modified
  improvements     Json                 // improvements achieved
  
  // Metadata
  startedAt        DateTime             @default(now()) @db.Timestamptz(6)
  completedAt      DateTime?            @db.Timestamptz(6)
  refinedBy        String               // refinement agent version
}
