generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String?
  status        String
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @db.Timestamptz(6)
  components    Component[]
  wiringSchemas WiringSchema[]
  messages      Message[]
  scenes3d      Scene3D[]
}

model Component {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId        String        @db.Uuid
  currentVersionId String?       @db.Uuid
  versions         CompVersion[]
  currentVersion   CompVersion?  @relation("currentCompVersion", fields: [currentVersionId], references: [id])
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model CompVersion {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  componentId   String      @db.Uuid
  versionNumber Int
  createdBy     String
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  specs         Json
  changeLogs    ChangeLog[]
  component     Component   @relation(fields: [componentId], references: [id], onDelete: Cascade)
  currentFor    Component[] @relation("currentCompVersion")

  @@unique([componentId, versionNumber])
}

model WiringSchema {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId        String        @db.Uuid
  currentVersionId String?       @db.Uuid
  versions         WireVersion[]
  currentVersion   WireVersion?  @relation("currentWireVersion", fields: [currentVersionId], references: [id])
  project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model WireVersion {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wiringSchemaId String         @db.Uuid
  versionNumber  Int
  createdBy      String
  createdAt      DateTime       @default(now()) @db.Timestamptz(6)
  wiringData     Json
  changeLogs     ChangeLog[]
  wiringSchema   WiringSchema   @relation(fields: [wiringSchemaId], references: [id], onDelete: Cascade)
  currentFor     WiringSchema[] @relation("currentWireVersion")

  @@unique([wiringSchemaId, versionNumber])
}

model ChangeLog {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entity         String
  changeType     String
  author         String
  diffPayload    Json?
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  compVersionId  String?       @db.Uuid
  wireVersionId  String?       @db.Uuid
  sceneVersionId String?       @db.Uuid
  compVersion    CompVersion?  @relation(fields: [compVersionId], references: [id], onDelete: Restrict)
  wireVersion    WireVersion?  @relation(fields: [wireVersionId], references: [id], onDelete: Restrict)
  sceneVersion   SceneVersion? @relation(fields: [sceneVersionId], references: [id], onDelete: Restrict)
}

model Message {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String   @db.Uuid
  context     String   // ex. "general", "materials", "wiring", "3d"
  content     String
  sender      String   // 'user' or 'ai'
  mode        String   // 'ask' or 'agent'
  suggestions Json?    // Suggestions attach√©es au message (pour les messages AI)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)

  @@index([projectId, context])
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Scene3D {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId        String         @db.Uuid
  name             String         @default("New Scene")
  currentVersionId String?        @db.Uuid
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @db.Timestamptz(6)
  versions         SceneVersion[]
  currentVersion   SceneVersion?  @relation("currentSceneVersion", fields: [currentVersionId], references: [id])
  project          Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model SceneVersion {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scene3dId    String       @db.Uuid
  versionNumber Int
  sceneGraph   Json         // Hierarchical structure with transforms
  createdBy    String
  createdAt    DateTime     @default(now()) @db.Timestamptz(6)
  changeLogs   ChangeLog[]
  scene3d      Scene3D      @relation(fields: [scene3dId], references: [id], onDelete: Cascade)
  currentFor   Scene3D[]    @relation("currentSceneVersion")
  
  @@unique([scene3dId, versionNumber])
}

model Component3D {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  type        Component3DType
  category    String           // chassis, decoration, pcb, sensor, etc.
  filePath    String?          // Path to STL file (nullable for generated components)
  fileSize    Int?             // File size in bytes
  metadata    Json             // Properties, dimensions, constraints, prompts
  isGenerated Boolean          @default(false)
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime         @default(now()) @db.Timestamptz(6)
}

enum Component3DType {
  DESIGN      // Decorative pieces generated by AI
  FUNCTIONAL  // Utility pieces (chassis, screws, etc.)
  ELECTRONIC  // Existing electronic components
  MECHANICAL  // Existing mechanical components
}
